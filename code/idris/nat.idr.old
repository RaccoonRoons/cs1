module nat

import bool
import pair

data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S (add n m)

pf: nat -> nat
pf = add (S (S O))

||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (m)(multp (mkPair(n)(m))))

factp: nat -> nat
factp O = (S O)
factp (S n) = (multp (mkPair (S n)(factp n)))

subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

exp: pair nat nat -> nat
exp (mkPair n O) = S O
exp (mkPair (n) (S m)) = multp (mkPair (exp (mkPair n m)) n)

-- given a pair of natural numbers, (a, b), return true if a is less than or equal to b, otherwise return false
lep: pair nat nat -> bool
lep (mkPair (O) (n)) = true
lep (mkPair (S n) (O)) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

-- given a pair of natural numbers, (a, b), return true if a is equal to b, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair (O) (O)) = true
eqp (mkPair (O) (S n)) = false
eqp (mkPair (S n) (O)) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair n m)

-- given a pair of natural numbers, (a, b), return true if a is greater than b, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair n m) = not (lep (mkPair n m))

-- given a pair of natural numbers, (a, b), return true if a is greater than or equal to b
gep: pair nat nat -> bool
gep (mkPair n O) = true
gep (mkPair (O) (S m)) = false
gep (mkPair (S n) (S m)) = gep (mkPair n m)

-- given a pair of natural numbers, (a, b), return true if a is less than b
ltp: pair nat nat -> bool
ltp (mkPair n m) = not (gep (mkPair n m))

fib: nat -> nat
fib O = O
fib (S O) = (S O)
fib (S (S n)) = addp (mkPair (fib (S n)) (fib n))
